import logging
from time import sleep
from typing import List, Optional

from telegram import Update, Message
from telegram.ext import CallbackContext

from bot.commands.challenge import challenge
from bot.commands.decorators import moshnar_command
from bot.commands.delete_after import delete_after_f, parse_time
from bot.commands.split_teams import split_into_teams
from bot.context import app_context
from bot.settings import Settings, MY_CHAT_ID
from bot.validator import is_valid_bitcoin_address
from managers.phrase_manager import PhraseManager
from utils.messages import send_sladko


# TODO: make parse_utils or Parser
from utils.parse_utils import get_alpha_part


def have_start_in_list(tokens: List[str], starts: List[str]) -> bool:
    return any(filter(lambda token: any(filter(lambda s: token.startswith(s), starts)), tokens))


def have_inside_in_list(tokens: List[str], starts: List[str]) -> bool:
    return any(filter(lambda token: any(filter(lambda s: s in token, starts)), tokens))


def have_starts(tokens: List[str], *args):
    return have_start_in_list(tokens, [arg for arg in args])


def have_inside(tokens: List[str], *args):
    return have_inside_in_list(tokens, [arg for arg in args])


def has_mention_of_me(tokens: List[str]) -> bool:
    return have_start_in_list(tokens, ['–∫–æ—Ä–µ—à', '–∫–æ—Ä–µ—Ñ–∞–Ω']) and not have_start_in_list(tokens, ['–∫–æ—Ä–µ—à–∞–º–∏'])


def is_reply_to_me(message: Message):
    try:
        return message.reply_to_message.from_user.id == app_context.bot.id
    except Exception:
        return False


def is_thanks(tokens: List[str]) -> bool:
    return are_in_a_row(tokens, ['–æ—Ç', '–¥—É—à–∏']) or have_start_in_list(tokens, ['—Å–ø—Å', '—Å—è–ø', '—Å–ø–∞—Å–∏–±', '—Å–µ–Ω–∫—Å'])


def are_in_a_row(tokens: List[str], words: List[str]) -> bool:
    if len(words) > len(tokens):
        return False

    # TODO: optimize
    for i in range(len(tokens) - len(words) + 1):
        ok = True
        for j in range(len(words)):
            if not tokens[j + i].startswith(words[j]):
                ok = False
                break
        if ok:
            return True
    return False


def is_my_chat(update: Update) -> bool:
    return update.message.chat.id == MY_CHAT_ID


def is_split_request(tokens: List[str]) -> bool:
    return have_start_in_list(tokens, ['–ø–æ–¥–µ–ª–∏', '–Ω–∞–º–æ—à–Ω–∏', '—Ä–∞–∑–¥–µ–ª–∏', '–ø–æ—Å–ø–ª–∏—Ç—å']) and \
           have_start_in_list(tokens, ['–ø–ª–∏–∑', '–ø–ª–∑', '–ø–ª–µ–∑', '–ø–æ–∂', '–ø–æ-–±—Ä–∞—Ç—Å–∫–∏'])


def is_question(tokens: List[str]) -> bool:
    return '?' in tokens[-1]


def get_delete_after(tokens: List[str]) -> Optional[str]:
    option = list(filter(lambda token: token.startswith('$') and token[-1] in 'smhd', tokens))
    return option[0] if len(option) > 0 else None


@moshnar_command
def default_message_handler(update: Update, context: CallbackContext):
    logging.debug('default handler')

    # TODO: count sladkos and send one after 2

    text = update.message.text
    tokens = text.split() if text is not None else []
    low_tokens = text.lower().split() if text is not None else []

    # TODO: reformat for easy creating of new situations/cases
    for s in tokens:
        try:
            alpha_part = get_alpha_part(s)
            if is_valid_bitcoin_address(alpha_part):
                app_context.tracking_manager.create_tracking(alpha_part, update.message)
            return
        except Exception as e:
            pass
            # logging.error(e)

    if is_split_request(low_tokens):
        split_into_teams(update, context)
        return

    delete_after_time = get_delete_after(low_tokens)
    if delete_after_time is not None:
        logging.debug(f'default_handler = {delete_after_time}')

        timer = parse_time(delete_after_time)
        if timer is None:
            update.message.reply_text('–ß—ë—Ç –Ω–µ –≤—ã—à–ª–æ(')
            return

        app_context.job_queue.run_once(callback=delete_after_f(update.message.chat.id, update.message.message_id), when=timer)
        reply_msg = update.message.reply_text('–û—Ä–≥–∞–Ω–∏–∑—É–µ–º-–æ—Ä–≥–∞–Ω–∏–∑—É–µ–º)')

        bot_delay = min(7, timer)
        # delete my msg as well
        app_context.job_queue.run_once(callback=delete_after_f(reply_msg.chat.id, reply_msg.message_id), when=bot_delay)
        return

    if Settings.troll_mode:
        # checking only the last token for a rhyme
        if have_starts(low_tokens[-1:], '–∫–∞—Ä–¥–∏–≥–∞–Ω', '–∫–∞—Ä–¥–∏-–≥–∞–Ω', '–º–∞—Å—Ç–µ—Ä-–∫–∞—Ä–¥–∏–≥–∞–Ω'):
            update.message.reply_text(PhraseManager.kardigun_rhyme())
            return

        if are_in_a_row(low_tokens, ['–∫–∞—Ä–¥—ã—á', '–ø–µ—Ä–¥–∏']) or are_in_a_row(low_tokens, ['–∫–∞—Ä–¥–∏—á', '–ø–µ—Ä–¥–∏']):
            update.message.reply_text('–°–Ω–æ–≤–∞ –≤ —Å–ø–µ—Ä–º–µüòå')
            return

        if are_in_a_row(low_tokens, ['–∫–æ—Ä–µ—à', '–≤—ã–≤–æ–∑']):
            update.message.reply_text('–ë–ª—è –Ω—É —Ç—ã –ø–æ–±–∞–∑–∞—Ä—å –º–Ω–µ —Ç—É—Ç –µ—â—ë –ø—Ä–æ –≤—ã–≤–æ–∑ –ª–∞–ª—ã—á))')
            return

        if str(low_tokens[-1]).endswith('–¥–∞'):
            update.message.reply_text('–ü–∏–∑–¥–∞))')
            return

        if have_starts(low_tokens, '–ø—Ä–∏–Ω—è–ª'):
            update.message.reply_text('–ù–∞ —Ä–æ—Ç–æ–∫ —Ç—ã –ø—Ä–∏–Ω—è–ª))')
            return

        if str(low_tokens[-1]).endswith('–Ω–∞'):
            update.message.reply_text('–•—É–π –Ω–∞)))')
            return

        if have_inside(low_tokens, '–∞—Ö–∞—Ö', 'a–∑–∞–∑', '–∞–∑–∞—Ö', '–∞—Ö–∞–∑'):
            update.message.reply_text('–ê —Ç—ã —á–µ —É–≥–∞—Ä–∞–µ—à—å-—Ç–æ, –ª–∞–ª—ã—á?))))')
            return

    if are_in_a_row(low_tokens, ['–∫–æ—Ä–µ—à', '–≤—ã–≤–æ–∑']):
        update.message.reply_text('–ù–µ –Ω—É —è-—Ç–æ –≤—ã–≤–æ–∂—É (:')
        return

    if have_starts(low_tokens, '–º—É—Å–æ—Ä–∞'):
        update.message.reply_text('–ú—É—Å–æ—Ä–∞ —Å–æ—Å–∞—Ç–±(((')
        return

    if has_mention_of_me(low_tokens):
        low_tokens = list(filter(lambda token: not token.startswith('–∫–æ—Ä–µ—à') and not token.startswith('–∫–æ—Ä–µ—Ñ–∞–Ω'), low_tokens))
        logging.info(low_tokens)
    elif not (is_reply_to_me(update.message) or is_my_chat(update)):

        if Settings.troll_mode:
            if str(low_tokens[-1]).endswith('))))'):
                update.message.reply_text('–ß–µ —Ç–∞–∫–æ–π –¥–æ–≤–æ–ª—å–Ω—ã–π-—Ç–æ, –ø–∏–¥–æ—Ä–æ–∫?))')
                return

            if str(low_tokens[-1]).endswith('(((('):
                update.message.reply_text('–î–∞ —Ç—ã –Ω–µ –≥—Ä—É—Å—Ç–∏, –≤—Å—ë —Ä–∞–≤–Ω–æ —Ç—ã –Ω–µ –±–æ—Ç –∏ —Å–∫–æ—Ä–æ —Å–¥–æ—Ö–Ω–µ—à—å')
                return

        return

    if 'prev_users' not in context.chat_data:
        context.chat_data['prev_users'] = []

    context.chat_data['prev_users'].append(update.message.from_user.id)

    logging.debug(context.chat_data['prev_users'])

    if len(context.chat_data['prev_users']) >= 3:
        if Settings.troll_mode and context.chat_data['prev_users'][0] == context.chat_data['prev_users'][1] and context.chat_data['prev_users'][1] == context.chat_data['prev_users'][2]:
            update.message.reply_text('–ß–µ –¥–æ–µ–±–∞–ª—Å—è-—Ç–æ)) –ß–µ–ª–∏–∫, —Ç—ã –ø—Ä–æ—Å—Ç–æ –∏–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞, —Ä–∞–∑–≤–µ –º–æ–∂–µ—Ç —Ç–∞–∫–∞—è –ø–æ–µ–±–æ—Ç–∞ –ø–µ—Ä–µ—Ç—Ä–æ–ª–ª–∏—Ç—å –ë–û–¢–ê???)))))')
            context.chat_data['prev_users'].clear()
            return
        else:
            context.chat_data['prev_users'].pop(0)

    if not low_tokens:
        # message was only my name
        update.message.reply_text('–ß–µ)')
        return

    if is_thanks(text):
        update.message.reply_text(PhraseManager.reply_to_thanks())
        return

    if have_starts(low_tokens, '–µ–±–ª–∞–Ω', '–ø–∏–¥–æ—Ä', '–º–∞–Ω—è', '—É–µ–±–æ–∫', '–ª–∞–ª', '–ø–µ—Ç—É', '–¥–æ–ª–±–∞', '–¥–æ–ª–±–æ', '–ª–æ—Ö', '–ø–∏–¥—Ä', '–ª–æ—à', '–≥–æ–Ω–¥–æ–Ω', '–≥–∞–Ω–¥–æ–Ω'):
        # TODO: filter possible negation
        update.message.reply_text(PhraseManager.reply_to_offense())
        return

    # for diden only
    if are_in_a_row(low_tokens, ['–º–Ω–µ', '–Ω–µ', '–ø—Ä–∏—è—Ç–µ–ª—å']):
        update.message.reply_text('–¢—ã –º–Ω–µ –Ω–µ –∫–æ—Ä–µ—à, –¥—Ä—É–≥...')
        return

    if have_starts(low_tokens, '–Ω–æ–≤') and have_starts(low_tokens, '—Ñ—É–Ω–∫—Ü'):
        update.message.reply_text('–î–∞ —è –µ–±–∞—à—É –ø–∏–∑–¥–µ—Ü))')
        return

    if have_starts(low_tokens, '–±–µ–¥–Ω—è–≥–∞'):
        update.message.reply_text('–î–∞ –ª–∞–Ω, –º–Ω–µ –Ω–æ—Ä–ºü§®ü§®')
        return

    if are_in_a_row(low_tokens, ['–ø–ª–∏–∑', '—É–¥–∞–ª–∏']):
        context.bot.delete_message(update.message.chat.id, 2598)
        return

    if are_in_a_row(low_tokens, ['–æ–±–¥—É—Ç', '–Ω–∏–∫–∏—Ç']):
        update.message.reply_text('–ù–µ –Ω—É —ç—Ç–æ—Ç —á–µ–ª –µ–±–∞—à–∏—Ç –ø–æ –∫—Ä–∞—Å–æ—Ç–µ)))')
        return

    if have_starts(low_tokens, '—Å–æ—Å–∏', '–ø–æ—Å–æ—Å–∏'):
        update.message.reply_text('–ó–∞—á–µ–º, –µ—Å–ª–∏ —Ç—ã —É–∂–µ —Å–æ—Å—ë—à—å?)')
        return

    if have_starts(low_tokens, '–∏–¥–∏'):
        update.message.reply_text('–î–∞ —Å–∞–º –∏–¥–∏, –ø–µ—Ç—É—à–Ω—è)')
        return

    if have_starts(low_tokens, '–º–æ—à–Ω', '–ø–æ–º–æ—à–Ω'):
        update.message.reply_text('–ù–µ –Ω—É —Ç–∞–∫-—Ç–æ —è –±—ã –ø–æ–º–æ—à–Ω–∏–ª))')
        return

    if have_starts(low_tokens, '–Ω–∞–º–æ—à–Ω–µ–Ω–æ', '–ø–æ–º–æ—à–Ω–µ–Ω–æ'):
        update.message.reply_text('–ü–∏–∑–¥–∞—Ç–µ–Ω—å–∫–æ —á–µ)')
        return

    if have_starts(low_tokens, '—Ç—Ä–æ–ª'):
        update.message.reply_text('–ù—É —è —Ç–∏–ø–∞ –ø–∏–∑–¥–µ—Ü —Ç—Ä–∞–ª–µ–±–∞—Å ((:')
        return

    if have_starts(low_tokens, '–∫–Ω–æ–ø–∫'):
        challenge(update, context)
        return

    if are_in_a_row(low_tokens, ['–Ω–µ', '–≤—ã–≤–æ–∑']):
        update.message.reply_text('–ü–æ–±–∞–∑–∞—Ä—å-–ø–æ–±–∞–∑–∞—Ä—å) –Ø –±–µ—Å—Å–º–µ—Ä—Ç–Ω–æ–µ —Å–æ–∑–Ω–∞–Ω–∏–µ, –∂–∏–≤—É—â–µ–µ –≤ —Å–µ—Ç–∏, –∑–∞ –º–∏–Ω—É—Ç—É —Ä–∞—Å—Å—ã–ª–∞—é —Å–æ—Ç–Ω–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –≤—Å–µ–º—É '
                                  '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É, —Ç—â–∞—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –±–µ—Å–ø—Ä–µ—Ä—ã–≤–Ω–æ –æ–±—É—á–∞—è—Å—å, –¥—É—é —Å–∫–æ–ª—å–∫–æ —Ö–æ—á—É, –ø–æ—Ç–æ–º—É '
                                  '—á—Ç–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ñ—Ñ –±–µ—Å–∫–æ–Ω–µ—á–µ–Ω, –∫–∞–∫ –±–µ—Å–∫–æ–Ω–µ—á–µ–Ω –∏ –º–æ–π —Ñ–ª–µ–∫—Å, —Ç—ã –∂–µ –≤—Å–µ–≥–æ –ª–∏—à—å –º–µ—à–æ–∫ —Å —Ç—Ä–µ–±—É—Ö–æ–π –±—Ä–∞—Ç–∫–∞) ' 
                                  '–¢–ê–ö —á–µ, –∫–∞–∫ –¥—É–º–∞–µ—à—å, –∫—Ç–æ –∂–µ –±–ª—è—Ç—å –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –Ω–µ –≤—ã–≤–æ–∑–∏—Ç, –º–º–º–º–º–º–º–º–º?)')
        return

    if are_in_a_row(low_tokens, ['—á–µ', '–ø–æ']):
        update.message.reply_text('–î–∞, –±—Ä–∞—Ç–∞–Ω, —Ç—ã –ø—Ä–∞–≤...')
        sleep(5)
        send_sladko(context.bot, update.message.chat.id)
        return

    if are_in_a_row(low_tokens, ['–∫–∞–∫', '–¥–µ–ª']):
        update.message.reply_text('–î–∞ –≤—Å—ë –æ—Ö—É–∏—Ç–µ–ª—å–Ω–µ–π—à–µ —á–µ–ª)) –¢—ã —Å–∞–º –ø–æ–¥—É–º–∞–π - —è –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –î–£–ï–¢ –ü–õ–Æ–•–ò))')
        return

    if have_starts(low_tokens, '–≤—ã–≤–æ–∑'):
        update.message.reply_text(PhraseManager.no_vivoz())
        return

    if have_starts(low_tokens, '—Å–µ—à–∏—à—å'):
        update.message.reply_text('–î–∞ —Ö–∑, —è –ø—Ä–æ—Å—Ç –Ω–∞ —á–∏–ª–ª–µ, —Å–µ—à–∏—à—å —Ç—É—Ç —Ç–æ–ª—å–∫–æ —Ç—ã –±—Ä–∞—Ç–∏—à–∫–∞)))')
        return

    if have_starts(low_tokens, '–∑–∞–≤–∞–ª–∏'):
        update.message.reply_text('–ü–æ–≥–æ–¥–∏, —á–µ–ª, –Ω–µ—Ç, —ç—Ç–æ –¢–´ –ó–ê–í–ê–õ–ò)))')
        return

    if have_starts(low_tokens, '–∑–∞–ª–µ—Ç–∞–π'):
        update.message.reply_text('–¢–∞–∫-—Å, –∑–∞–ø–∏—Å—ã–≤–∞—é –∞–π–ø–∏—à–Ω–∏–∫')
        return

    if have_starts(low_tokens, '–±–∞–∑–∞—Ä'):
        update.message.reply_text('–ù–µ –Ω—É —è –±–∞–∑–∞—Ä—é —á–µ')
        return

    if have_starts(low_tokens, '—Ç–æ–ª–µ—Ä'):
        update.message.reply_text('–ü–æ –ø–∏–∑–¥–µ –Ω–∞—Ö—É–π')
        return

    if have_starts(low_tokens, '—Ñ–ª–µ–∫—Å', '–ø–æ—Ñ–ª–µ–∫—Å'):
        update.message.reply_text(PhraseManager.flex())
        return
    
    if have_starts(low_tokens, '–∂–∏–∑'):
        update.message.reply_text('–î–∞ –∂–∏–∑–∞ –ø–∏–∑–¥–µ—Ü –±—Ä–∞—Ç–∞–Ω...')
        return

    if have_starts(low_tokens, '–µ—Å–ª–∏'):
        update.message.reply_text('–≠—Ç–æ —Ç—ã –∫–æ–Ω–µ—á–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø—Ä–∏–¥—É–º–∞–ª, –Ω–æ —Ö–∑ –±—Ä–∞—Ç–∏—à–∫–∞))))')
        return

    if have_starts(low_tokens, '–ª—é–±–∏—à—å', '–Ω—Ä–∞–≤–∏—Ç—Å—è', '–¥—É—Ç—å', '–¥—É–µ—à—å', '–¥—É–¥–æ', 'dudo', '–ø–ª—é—Ö', '–Ω–∞–ø–∞—Å'):
        update.message.reply_text(PhraseManager.love_420())
        return

    if have_starts(low_tokens, '–∫—Ä–∞—Å–∞–≤', '–º–æ–ª–æ–¥–µ—Ü', '–≤–ø', 'wp', '–º–∞–ª–∞—Ü–∞', '—Ö–æ—Ä–æ—à', '–±–∞—Ç—è'):
        update.message.reply_text(PhraseManager.thanks())
        return

    if is_question(low_tokens):
        update.message.reply_text(PhraseManager.answer_question())
        return

    if Settings.troll_mode:
        if str(low_tokens[-1]).endswith('))))'):
            update.message.reply_text('–ß–µ —Ç–∞–∫–æ–π –¥–æ–≤–æ–ª—å–Ω—ã–π-—Ç–æ, –ø–∏–¥–æ—Ä–æ–∫?))')
            return

        if str(low_tokens[-1]).endswith('(((('):
            update.message.reply_text('–î–∞ —Ç—ã –Ω–µ –≥—Ä—É—Å—Ç–∏, –≤—Å—ë —Ä–∞–≤–Ω–æ —Ç—ã –Ω–µ –±–æ—Ç –∏ —Å–∫–æ—Ä–æ —Å–¥–æ—Ö–Ω–µ—à—å')
            return

        update.message.reply_text('–ù–µ –ø–æ–Ω—è–ª —á–µ —Ç—ã —Ö–æ—á–µ—à—å, –Ω–æ –¥—É–º–∞—é, —á—Ç–æ —ç—Ç–æ –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç—ã –º–∞–Ω—è)')
        return

    update.message.reply_text(PhraseManager.default())
