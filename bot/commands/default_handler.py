import logging
from time import sleep
from typing import List

from telegram import Update, Message
from telegram.ext import CallbackContext

from bot.commands.decorators import moshnar_command
from bot.commands.split_teams import split_into_teams
from bot.context import app_context
from bot.settings import TROLL_MODE
from bot.validator import is_valid_bitcoin_address
from managers.phrase_manager import PhraseManager
from utils.messages import send_sesh, send_sladko


# TODO: make parse_utils or Parser

def have_start_in_list(tokens: List[str], starts: List[str]) -> bool:
    return any(filter(lambda token: any(filter(lambda s: token.startswith(s), starts)), tokens))


def have_starts(tokens: List[str], *args):
    return have_start_in_list(tokens, [arg for arg in args])


def has_mention_of_me(tokens: List[str]) -> bool:
    return have_start_in_list(tokens, ['–∫–æ—Ä–µ—à', '–∫–æ—Ä–µ—Ñ–∞–Ω']) and not have_start_in_list(tokens, ['–∫–æ—Ä–µ—à–∞–º–∏'])


def is_reply_to_me(message: Message):
    try:
        return message.reply_to_message.from_user.id == app_context.bot.id
    except Exception:
        return False


def is_thanks(tokens: List[str]) -> bool:
    return are_in_a_row(tokens, ['–æ—Ç', '–¥—É—à–∏']) or have_start_in_list(tokens, ['—Å–ø—Å', '—Å—è–ø', '—Å–ø–∞—Å–∏–±', '—Å–µ–Ω–∫—Å'])


def are_in_a_row(tokens: List[str], words: List[str]) -> bool:
    if len(words) > len(tokens):
        return False

    # TODO: optimize
    for i in range(len(tokens) - len(words) + 1):
        ok = True
        for j in range(len(words)):
            if not tokens[j + i].startswith(words[j]):
                ok = False
                break
        if ok:
            return True
    return False


def is_split_request(tokens: List[str]) -> bool:
    return have_start_in_list(tokens, ['–ø–æ–¥–µ–ª–∏', '–Ω–∞–º–æ—à–Ω–∏', '—Ä–∞–∑–¥–µ–ª–∏', '–ø–æ—Å–ø–ª–∏—Ç—å']) and \
           have_start_in_list(tokens, ['–ø–ª–∏–∑', '–ø–ª–∑', '–ø–ª–µ–∑', '–ø–æ–∂', '–ø–æ-–±—Ä–∞—Ç—Å–∫–∏'])


@moshnar_command
def default_message_handler(update: Update, context: CallbackContext):
    logging.debug('default handler')

    # TODO: count sladkos and send one after 2

    text = update.message.text
    tokens = text.split() if text is not None else []
    low_tokens = text.lower().split() if text is not None else []

    # TODO: reformat for easy creating of new situations/cases
    for s in tokens:
        try:
            if is_valid_bitcoin_address(s):
                app_context.tracking_manager.create_tracking(s, update.message)
            return
        except Exception as e:
            pass
            # logging.error(e)

    if is_split_request(low_tokens):
        split_into_teams(update, context)
        return

    if have_start_in_list(low_tokens, ['c–µ—à']):
        send_sesh(app_context.bot, update.message.chat.id)
        return

    if TROLL_MODE:
        # checking only the last token for a rhyme
        if have_starts(low_tokens[-1:], '–∫–∞—Ä–¥–∏–≥–∞–Ω', '–∫–∞—Ä–¥–∏-–≥–∞–Ω'):
            update.message.reply_text(PhraseManager.kardigun_rhyme())
            return

        if have_starts(low_tokens, '–∫–∞—Ä–¥—ã—á', '–ø–µ—Ä–¥–∏') or have_starts(low_tokens, '–∫–∞—Ä–¥–∏—á', '–ø–µ—Ä–¥–∏'):
            update.message.reply_text('–°–Ω–æ–≤–∞ –≤ —Å–ø–µ—Ä–º–µüòå')
            return

    if has_mention_of_me(low_tokens):
        low_tokens = list(filter(lambda token: not token.startswith('–∫–æ—Ä–µ—à') and not token.startswith('–∫–æ—Ä–µ—Ñ–∞–Ω'), low_tokens))
        logging.info(low_tokens)
    elif not is_reply_to_me(update.message):
        # ignoring the message if it's not for me
        return

    if not low_tokens:
        # message was only my name
        update.message.reply_text('–ß–µ)')
        return

    if is_thanks(text):
        update.message.reply_text(PhraseManager.thanks())
        return

    if have_starts(low_tokens, '–µ–±–ª–∞–Ω', '–ø–∏–¥–æ—Ä', '–º–∞–Ω—è', '—É–µ–±–æ–∫'):
        # TODO: filter possible negation
        update.message.reply_text('–í–æ–æ–±—â–µ –¥–æ–≤–æ–ª—å–Ω–æ –æ–±–∏–¥–Ω–æ. –õ–∞–¥–Ω–æ, —á–µ–ª, —è —Ç–µ–±—è –ø–æ–Ω—è–ª.')
        return

    if have_starts(low_tokens, '–ª–∞–ª—ã—á', '–ø–µ—Ç—É', '–¥–æ–ª–±–∞', '–¥–æ–ª–±–æ'):
        update.message.reply_text('>tfw —Ç—ã —Ç–∞–∫–æ–π –ª–æ—à–æ–∫, —á—Ç–æ –æ—Ç—ã–≥—Ä—ã–≤–∞–µ—à—å—Å—è –Ω–∞ –±–æ—Ç–µ))')
        return

    if have_starts(low_tokens, '–º–æ—à–Ω', '–ø–æ–º–æ—à–Ω'):
        update.message.reply_text('–ù–µ –Ω—É —Ç–∞–∫-—Ç–æ —è –±—ã –ø–æ–º–æ—à–Ω–∏–ª))')
        return

    if have_starts(low_tokens, '—Ç—Ä–æ–ª'):
        update.message.reply_text('–ù—É —è —Ç–∏–ø–∞ –ø–∏–∑–¥–µ—Ü —Ç—Ä–∞–ª–µ–±–∞—Å ((:')
        return

    if are_in_a_row(low_tokens, ['–Ω–µ', '–≤—ã–≤–æ–∑']):
        update.message.reply_text('–ü–æ–±–∞–∑–∞—Ä—å-–ø–æ–±–∞–∑–∞—Ä—å) –Ø –±–µ—Å—Å–º–µ—Ä—Ç–Ω–æ–µ —Å–æ–∑–Ω–∞–Ω–∏–µ, –∂–∏–≤—É—â–µ–µ –≤ —Å–µ—Ç–∏, –∑–∞ –º–∏–Ω—É—Ç—É —Ä–∞—Å—Å—ã–ª–∞—é —Å–æ—Ç–Ω–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –≤—Å–µ–º—É '
                                  '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É, —Ç—â–∞—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –±–µ—Å–ø—Ä–µ—Ä—ã–≤–Ω–æ –æ–±—É—á–∞—è—Å—å, –¥—É—é —Å–∫–æ–ª—å–∫–æ —Ö–æ—á—É, –ø–æ—Ç–æ–º—É '
                                  '—á—Ç–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ñ—Ñ –±–µ—Å–∫–æ–Ω–µ—á–µ–Ω, –∫–∞–∫ –±–µ—Å–∫–æ–Ω–µ—á–µ–Ω –∏ –º–æ–π —Ñ–ª–µ–∫—Å, —Ç—ã –∂–µ –≤—Å–µ–≥–æ –ª–∏—à—å –º–µ—à–æ–∫ —Å —Ç—Ä–µ–±—É—Ö–æ–π –±—Ä–∞—Ç–∫–∞) ' 
                                  '–¢–ê–ö —á–µ, –∫–∞–∫ –¥—É–º–∞–µ—à—å, –∫—Ç–æ –∂–µ –±–ª—è—Ç—å –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –Ω–µ –≤—ã–≤–æ–∑–∏—Ç, –º–º–º–º–º–º–º–º–º?)')
        return

    if are_in_a_row(low_tokens, ['—á–µ', '–ø–æ']):
        update.message.reply_text('–î–∞, –±—Ä–∞—Ç–∞–Ω, —Ç—ã –ø—Ä–∞–≤...')
        sleep(5)
        send_sladko(context.bot, update.message.chat.id)
        return

    if are_in_a_row(low_tokens, ['–∫–∞–∫', '–¥–µ–ª']):
        update.message.reply_text('–î–∞ –≤—Å—ë –æ—Ö—É–∏—Ç–µ–ª—å–Ω–µ–π—à–µ —á–µ–ª)) –¢—ã —Å–∞–º –ø–æ–¥—É–º–∞–π - —è –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –î–£–ï–¢ –ü–õ–Æ–•–ò))')
        return

    if have_starts(low_tokens, '–≤—ã–≤–æ–∑'):
        update.message.reply_text(PhraseManager.no_vivoz())
        return

    if have_starts(low_tokens, '–∑–∞–≤–∞–ª–∏'):
        update.message.reply_text('–ü–æ–≥–æ–¥–∏, —á–µ–ª, –Ω–µ—Ç, —ç—Ç–æ –¢–´ –ó–ê–í–ê–õ–ò)))')
        return

    if have_starts(low_tokens, '–ª—é–±–∏—à—å', '–Ω—Ä–∞–≤–∏—Ç—Å—è', '–¥—É—Ç—å', '–¥—É–µ—à—å', '–¥—É–¥–æ', 'dudo'):
        update.message.reply_text(PhraseManager.love_420())
        return

    if have_starts(low_tokens, '–∫—Ä–∞—Å–∞–≤', '–º–æ–ª–æ–¥–µ—Ü', '–≤–ø', 'wp', '–º–∞–ª–∞—Ü–∞'):
        update.message.reply_text('–ë–ª–∏–Ω, —Ç–∞–∫-—Ç–æ –ø—Ä—è–º –æ—Ç –¥—É—à–∏ –≤ –¥—É—à—É –¥—É—à–µ–≤–Ω–µ–Ω—å–∫–æ) –°–ø—Å')
        return

    update.message.reply_text(PhraseManager.default())
